Re: MATLAB/SPM compatibility

I've gone through SPM2 and SPM5 to see what they expect the header and
data structures to look like.

hdr.dime.datatype [short?  datatype]
hdr.dime.dim [8 int16s, first is number of dimensions, then the extents, then zeros]
hdr.dime.cal_min (and cal_max):
hdr.dime.funused1 [scalefactor]
hdr.dime.funused2 [0]
hdr.dime.funused3 [0]
hdr.dime.pixdim []
hdr.dime.glmax (and glmin) []
hdr.dime.bitpix [sizeof datatype?]
hdr.dime.vox_offset []

hdr.hk.hkey_un0
hdr.hk.db_name
hdr.hk.sizeof_hdr

hdr.hist.origin
hdr.hist.descrip
hdr.hist.orient



to generate spm datatypes and bits per pixel, you can use:
  hdr.dime.datatype=spm_type('xxxx')
  hdr.dime.bitpix=spm_type('xxxx')
where xxx is from:

('uint8','int16','int32','float','double','int8','uint16','uint32','uint8','int16','int32\
',
'float','double','int8','uint16','uint32')




Okay, here are some notes on what MATLAB expects of an image that's
loaded.  MATLAB is flexible about building structures -- you can add
fields ad-hoc.  So you can say:

V.fname='foo.cub'

and you have created a structure named V with one field.  A volume in
SPM looks like this:

V.fname = 'filename.cub'
V.dim = [dimx dimy dimz]
V.mat = eye(4)    % eye(4) creates a 4x4 identity matrix
V.pinfo = [1 0 0]'   % apostrophe is important!
V.private.hdr
