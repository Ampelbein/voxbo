
VoxBo v1.6
Release Notes
February 9, 2004

Thank you for taking the time to read about VoxBo release 1.6!

VoxBo release 1.6 includes lots of enhancements, bug fixes, and new
tools.  Unlike the last few releases, it's a complete release, which
means you should be able to install it easily even if you have no
previous VoxBo release installed.

These release notes are in three sections: one for users, one for
administrators, and one for anyone who wants to build VoxBo on their
own.

Thank you for your time.

Dan (writing for the VoxBo team without their explicit consent!)

----------------------------------------------------
For VoxBo Users

--> vborient is a new command-line program a new command-line program
    that you can use to change the orientation of a 3D or 4D image
    file, using the voxbo orientation codes.  it can also be used to
    de-interleave images.

--> vbstatmap is a new command-line program that allows you to create
    statistical maps from a GLM folder right from the command line.
    you just specify a GLM folder, a contrast, and a scale, and it
    creates your stat cube.  It will also provide, on demand, FDR
    thresholds.

--> vecsplit is a new command-line program that will split a movement
    parameter file into six separate vectors.

--> vecview is a new graphical interface that lets you browse vector
    files, matrix files, or movement parameter files from the command
    line.  (it should replace the IDL-based graphmoveparams routine.)

--> vbmaskmunge is a relatively new program that can be used to smooth
    a mask, with the result a 0/1 mask.  it can be used to clean up
    masks extracted from atlases.

--> Two not-so-new programs are back in this release.  They aren't
    particularly clean, but they are somewhat useful.  extractmask
    extracts a single mask from an existing multi-mask file and
    resamples it to your specifications.  It's mostly useful if you
    have a big atlas mask file and want to extract and resample a
    particular region.

--> A new scripting system is introduced as of this version, that
    should be a lot simpler to use than the old vbmakeprep.  It's
    instantiated in two programs: vbprep, which processes the scripts,
    and vbprepform, a graphical interface.  These programs will
    replace voxprep (which is on its last legs and probably won't be
    in release 1.7), and to facilitate this we've included a few
    sample preprocessing scripts to help you get started.

--> vbbatch is a new program that lets you create simple job sequences
    at the command line.  This is the most expedient (but least
    flexible) way of distributing work across a cluster, without the
    need to create jobtype files.  It's basically a substitute for
    opening up a slew of terminal windows and typing the same command
    with a different filename in each.

--> The first release of the new version of the manual is now
    available.  Don't get too excited, the only part that's really
    been updated is the section on command-line tools.  Also, it's
    been converted to docbook format, which means you can get it as
    html and pdf.  We expect to have a more thoroughly revised manual
    in the next month, but we'll also try to make bits available as
    they're completed.

--> There are more significant changes to vbview, including a new
    multi-slice mode (all slices simultaneously) and a first cut at
    statistical overlays.  You even stand a chance at being able to
    load a glm contrast, although you may first need to copy an
    appropriate anatomical into the glm directory (using the name
    Display.cub).

--> vbqa should work again, please let us know if it gives you
    problems.

--> realign -q can now be used to get a few summary measures from a
    movement parameter file

--> The stand-alone glm interface (glm) and g-matrix designer (gdw)
    have seen some substantial enhancements and bug fixes.  They
    should now be able to do everything the IDL interface did.  We're
    hoping to be rid of the IDL interface completely before the next
    release, so it would be a great help if you could start to use it
    and let us know if it gives you any trouble.

--> The shell scripts oldprep.sh and newprep.sh have been updated a
    bit and should now handle your data more reliably

--> resample and orient should now adjust the AbsoluteCornerPosition
    and Origin fields appropriately.

--> vbmakerfx now handles F tests properly.

--> When writing an image file from any command line program, there
    are a few tags you can use to affect the files you're writing.  If
    your output file is called foo.cub[little], it will be named
    foo.cub and it will be little-endian.  If your putput file is
    called foo.img[big] it will be called foo.img/foo.hdr and it will
    be big-endian.  More such flags are coming.

--> sumrfx now automatically reports inter-region t-tests for each
    pair of regions, within each subject map.  that is, if you have an
    rfx volume with beta maps from 10 subjects, and you run sumrfx
    with a map that has three disconnected regions, sumrfx will report
    the results of three t-tests for each subject (using an unpaired
    two-sample t-test for groups with unequal variances).

--> vbmakeglm and vbprep take the -n flag, which allows you to select
    just one GLM or dataset to be processed.  i.e., you don't have to
    jump through as many hoops as before if just one or two subjects
    went bad.

--> The following executables were available in the last release, but
    we're highlighting them again just to make sure you know they're
    there: vbfit, vbsmooth, vbhdr.

----------------------------------------------------
For VoxBo Administrators

--> This is a complete VoxBo release, including c++ and IDL source
    code, pre-built Linux binaries, brain image templates, and all the
    other things you expect out of a VoxBo release.  Note that the job
    scheduler and related components (the voxq, vbsubmit, etc.) are
    unchanged since version 1.3b7.  A completely new version has been
    in the works for more than a year, but still isn't ready.

--> If you have an existing running VoxBo installation, as always we
    recommend moving it out of the way and installing the new version
    clean.  It's as simple as "mv VoxBo OldVoxBo."  Then you can
    create a fresh VoxBo directory for the new stuff.

--> To install everything in default locations inside
    /usr/local/VoxBo, first unpack the tar file, creating a directory
    called "voxbo-1.6" (this can be anywhere).  Make sure user voxbo
    owns /usr/local/VoxBo.  Move the contents of voxbo-1.6 into the
    VoxBo directory.  Do a "make install" to set a few permissions.
    Then you just need to edit (or migrate) your etc/defaults file,
    and other customizations from your old version, and you're done.

--> The IDL code requires the binary I/O plug-in "idlvbio.so," which
    is built along with the other c code.  The included compiled
    version should work with IDL 5.6, but not other versions.  If you
    need to compile it on your own, see the build notes below.

----------------------------------------------------
For VoxBo Hackers

Here are some notes on how to build VoxBo release 1.6, in case you'd
like to build your own version.  These notes describe how the release
was built.  If you follow them exactly, you should get exactly what's
already in the release.  Most likely you'll want to build on a more
modern machine.  We used an older Linux distribution to maximize
compatibility.

Our build box is a RedHat 7.2 machine (actually installed under
vmware), installed as a "workstation" with development tools selected,
and no patches.  We installed the following additional components,
available from the VoxBo web site:

gcc 3.3
gsl 1.4
octave 2.1.53
qt 3.2.3

Note that if you only need to build the IDL plug-in (called dlm or
IDLI), you can skip some of these steps as noted below.

1. build and install gcc

   Chances are you already have a perfectly fine compiler installed,
   and can skip this.  But it's always fun to build gcc.  We used the
   --disable-shared option, but you may not have to if all your
   machines have the same version of the c++ libs.  Note that if you
   install gcc in the default location (/usr/local/), make sure you
   adjust your path or move the original gcc, so that the makefiles
   will invoke the new one.  We just renamed gcc, g++, and g77 in the
   /usr/bin directory.

2. build and install the gsl libs

   Again, we used --disable-shared, not necessary if you have gsl libs
   on all your machines.

3. build and install qt

   When configuring, use the -thread option to build libqt-mt, the
   -no-xft option to omit xft support, and the -no-sm option to omit
   session management stuff.  Otherwise you'll have to play with the
   makefiles some.  We also used the -static option, again for
   portability, so our final configure line was:

   ./configure -thread -static -no-xft -no-sm

   We put everything in /usr/local/qt, and set the QTDIR environment
   variable to that directory for the build, to make sure it used the
   right version of moc.

4. build and install octave

   This still seems to be a pain, but we're hoping to drop octave
   soon.  Here's what worked for us.  After configuring the octave
   build, we did the following:

   make libcruft
   make liboctave
   [then as root:]
   make -C libcruft install
   make -C liboctave install
   cp -f config.h src/*.h /usr/local/include/octave*/octave
   ln -s /usr/local/include/octave*/octave /usr/local/include/octave
   ln -s /usr/local/lib/octave* /usr/local/lib/octave

   I believe if you have dynamic versions of the lapack and blas
   libraries installed, you may need to tweak the voxbo makefiles that
   use octave, just by adding -lblas and -llapack later on the LIBS
   line wherever you see -loctave and -lcruft.  You can grep for
   "loctave" in src/*/Makefile to find out where you need to do this.
   Alternatively, you can just move these two libs out of the way
   temporarily while you build octave.

5. If you're using a version of IDL earlier than 5.6, copy your IDL
   export.h file to the src/stand_alone directory.  It's usually in
   /usr/local/rsi/idl/external.

6. in the voxbo src directory, do:
   make
   make install

   Note that if you only need the IDLI plug-in, you can cd to the
   "stand_alone" directory and do "make idlvbio.so."  Then you can
   just copy this file to your VoxBo pros directory.

7. enjoy!

If you have any trouble, feel free to post to the voxbo-general
mailing list.  That's what it's for.
