
VoxBo v1.8
Release Notes
March XX, 2006

Thank you for taking the time to read about VoxBo release 1.8!

Release 1.8 includes many enhancements, bug fixes, and new tools.
It's recommended for old and new users alike.


These release notes are in three sections: one for users, one for
administrators, and one for anyone who wants to build VoxBo on their
own.

Incidentally, if you're wondering if you missed version 1.7, you
didn't.  We have been using the release number 1.7 internally for
testing, and skipped to 1.8 for the public release to avoid confusion.

Thank you for your time.

Dan (writing for the VoxBo team)

----------------------------------------------------
For VoxBo Users

[contents of whatsnew.txt]

----------------------------------------------------
For VoxBo Administrators

--> This is a complete VoxBo release, including c++ IDL source code,
    pre-built Linux binaries, brain image templates, and all the other
    things you expect out of a VoxBo release.

--> If you have an existing running VoxBo installation, as always we
    recommend moving it out of the way and installing the new version
    clean.  It's as simple as "mv VoxBo OldVoxBo."  Then you can
    create a fresh VoxBo directory for the new stuff.  If you're not
    happy with the new version, restore the old directory.

--> To install everything in default locations inside
    /usr/local/VoxBo, first unpack the tar file, creating a directory
    called "voxbo-1.8" (this can be anywhere).  Make sure user voxbo
    owns /usr/local/VoxBo.  Move the contents of voxbo-1.8 into the
    VoxBo directory.  Do a "make install" to set a few permissions.
    Then you just need to edit (or migrate) your etc/defaults file,
    and other customizations from your old version, and you're done.

--> The IDL code requires the binary I/O plug-in "idlvbio.so," which
    is built along with the other c code.  The included compiled
    version should work with IDL 5.6, but not other versions.  If you
    need to compile it on your own, see the build notes below.

----------------------------------------------------
For VoxBo Hackers

Here are some notes on how to build VoxBo.  These notes describe how
the release was built, on our RedHat 9 build box (actually a virtual
machine under VMWare).  If you follow this procedure, you should get
the same results.  Most likely you'll want to build on a more modern
machine, as we generally do for our internal use (we use an older
Linux distribution to maximize compatibility for public releases).

Our build box is installed as a "workstation" with development tools
selected, and no patches.  We installed the following additional
components, which for your convenience we've made available from the
VoxBo web site:

gcc 3.4.5
gsl 1.7
octave 2.1.72
qt 3.3.5

Here are the steps it takes to build from scratch.  Please note that
if you are trying to build applications that will run on multiple
machines running different linux distributions (e.g., redhat 7.3 and
redhat 9.0), it's probably important to build on the oldest system.

1. build and install gcc

   Chances are you already have a perfectly fine version installed,
   and can skip this.  But it's always fun to build gcc.  We
   configured with the --disable-shared option, to force a static
   version of libstc++.  Depending on your needs, you may be able to
   speed things up by also using --enable-languages=c,c++,f77

2. build and install the gsl libs

   Use the --disable-shared option here too.

3. build and install qt

   You could use the QT libs that came with your distribution, but QT
   is a big mess, and it will save you from some makefile hell if you
   build your own.  We build it this way in /usr/local/qt:

   ./configure -thread -static -no-xft -no-sm -no-xrandr -no-xinerama\
                -no-xrender -no-xcursor

   If you can't use /usr/local/qt, use the QTDIR flag when building
   VoxBo to make sure you get the right libraries.  The qt libs are
   built static, so binaries linked with this should be portable.  To
   speed up the build, you can omit the tutorial and examples by
   editing the top-level Makefile and modifying the target "all" to
   remove sub-tutorial and sub-examples.

4. build and install octave

   We're hoping to drop octave soon, but the following procedure seems
   to work well.

   ./configure --disable-shared --without-blas --without-lapack --disable-readline
   make libcruft
   make liboctave
   make -C libcruft install
   make -C liboctave install
   cp -f config.h src/*.h /usr/local/include/octave*/octave
   ln -s /usr/local/include/octave*/octave /usr/local/include/octave
   ln -s /usr/local/lib/octave* /usr/local/lib/octave

   [on macs, omit --without-blas and --without-lapack]
   ./configure --disable-shared --disable-readline\
        --with-blas=/System/Library/Frameworks/vecLib.framework/Versions/A/vecLib\
        --with-lapack=/System/Library/Frameworks/vecLib.framework/Versions/A/vecLib

5. build voxbo

   Now you're finally ready to build VoxBo.  If all the above has gone
   well, you should be able to do the following in the voxbo src
   directory:

   make
   make install

   The install targets honor the following variables, which may
   be set in your environment or on the "make install" command line:

   ROOTDIR [default=/usr/local/VoxBo]
   BINDIR [default=ROOTDIR/bin] -- where the executables go
   PRODIR [default=ROOTDIR/pros] -- where IDL-related stuff goes (mainly the plug-in)
   FFDIR [default=ROOTDIR/etc/fileformats] -- where the file format plug-ins go

6. enjoy!

If you have any trouble, feel free to post to the voxbo-general
mailing list.  That's what it's for.

----------------------------------------------------
The VoxBo Release Build Box, Linux

We build VoxBo Linux releases on a VMWare (workstation v4.5) virtual
machine, but this procedure should work just as well on a real machine
if you're so inclined.  We use RedHat 9, which strikes a balance
between comfort and compatibility.

1. Install vanilla Redhat 9 (tip: mount the CD images, don't burn
CDs).

2. Add the following line to the ifcfg-eth0 file:


3. Install 
